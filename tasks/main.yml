---
# tasks/main.yml file for ansible-nifi
- name: include ./base/{{ ansible_os_family }}.yml
  include_tasks: ./base/{{ ansible_os_family }}.yml
  tags: [always]

- name: create /etc/hosts
  template:
    src: templates/hosts.j2
    dest: /etc/hosts
    mode: 0644
    unsafe_writes: "{{ ansible_virtualization_type == 'docker' }}"
  when: create_etc_hosts | default("yes", true) | bool
  tags: [always]

- name: set nofile ulimit to {{ pam_limits_nofile }}
  pam_limits:
    domain: '*'
    limit_type: "{{ item }}"
    limit_item: nofile
    value: "{{ pam_limits_nofile }}"
    use_max: yes
  with_items:
    - hard
    - soft
  tags: [always]

- name: set nproc ulimit to {{ pam_limits_nproc }}
  pam_limits:
    domain: '*'
    limit_type: "{{ item }}"
    limit_item: nproc
    value: "{{ pam_limits_nproc }}"
    use_max: yes
  with_items:
    - hard
    - soft
  tags: [always]

- name: set net.ipv4.ip_local_port_range={{ net_ipv4_ip_local_port_range }}
  sysctl:
    name: net.ipv4.ip_local_port_range
    value: "{{ net_ipv4_ip_local_port_range }}"
    sysctl_set: yes
    state: present
    reload: yes
  when: ansible_virtualization_type != "docker"
  tags: [always]

- name: set vm.swapiness={{ vm_swapiness }}
  lineinfile:
    dest: /etc/sysctl.conf
    regexp: '^vm.swapiness='
    line: vm.swapiness={{ vm_swapiness }}
  tags: [always]

- name: include ./java/{{ ansible_os_family }}.yml
  include_tasks: ./java/{{ ansible_os_family }}.yml
  tags: [java, zookeeper]

# See https://www.java.com/en/configure_crypto.html
- name: force TLSv1.2 with java
  block:
    - name: set java_security_file
      set_fact:
        java_security_file: "{{ java_home }}/{{ (java_version|string == '1.8' or java_version|string == '1.8.0' or java_version|string == '8') | ternary('jre/lib/security/java.security', 'conf/security/java.security') }}"
        cacheable: yes
      tags: [java, zookeeper]

    - name: check for TLSv1, TLSv1.1 in java.security file
      shell: grep -Pzo '(?sm)^jdk\.tls\.disabledAlgorithms=.*?(?<!\\)\n' {{ java_security_file }} | grep -Pz '\b{{ item | regex_escape }}(\s*,\s*|\Z)'
      register: grep_result
      with_items: ["TLSv1", "TLSv1.1"]
      failed_when: grep_result.rc > 1 or grep_result.stderr|length > 0
      changed_when: grep_result.rc == 1
      tags: [java, zookeeper]

    - name: disable TLSv1, TLSv1.1
      replace:
        path: "{{ java_security_file }}"
        regexp: '(?sm)^jdk\.tls\.disabledAlgorithms=(.*?)(?<!\\)\n'
        replace: 'jdk.tls.disabledAlgorithms=\1, {{ item }}\n'
      with_items: "{{ grep_result.results | selectattr('rc', 'equalto', 1) | map(attribute='item') | list }}"
      tags: [java, zookeeper]
  when: force_tls_v1_2 | default("yes", true) | bool

- name: set java random source to /dev/urandom
  lineinfile:
    dest: "{{ java_security_file | realpath }}"
    regexp: '^securerandom\.source=.*$'
    line: 'securerandom.source=file:/dev/urandom'
  tags: [java, zookeeper]

- name: create /etc/profile.d/java.sh
  template:
    src: templates/java.sh.j2
    dest: /etc/profile.d/java.sh
    mode: 0644
  tags: [java, zookeeper]

- name: include ./nifi/common.yml
  include_tasks: ./nifi/common.yml

- name: set nifi_cluster
  set_fact:
    nifi_cluster: nifi_cluster | default("no", true) | bool
    cacheable: yes

- name: include ./nifi/{{ nifi_cluster | bool | ternary("cluster", "standalone") }}.yml
  include_tasks: ./nifi/{{ nifi_cluster | bool | ternary("cluster", "standalone") }}.yml

- name: set zookeeper_install
  set_fact:
    zookeeper_install: "{{ (nifi_cluster|bool) | ternary((zookeeper_install | default ('embedded', true)), (zookeeper_install | default ('none', true))) }}"
    cacheable: yes
  tags: [zookeeper]

- name: include ./zookeeper/{{ zookeeper_install }}.yml
  include_tasks: ./zookeeper/{{ zookeeper_install }}.yml
  when: nifi_cluster|bool or zookeeper_install == "local"
  tags: [zookeeper]

# Just be opinionated until bringing systemd back in.
- name: include ./init/supervisord.yml
  include_tasks: ./init/supervisord.yml
  tags: [zookeeper]

- name: check whether nifi started successfully
  block:
    - name: check whether the UI is available in ./logs/nifi-app.log
      wait_for:
        timeout: 300
        path: "{{ nifi_home }}/logs/nifi-app.log"
        search_regex: 'JettyServer NiFi has started\. The UI is available at the following URLs'
      ignore_errors: yes
    - name: check whether a port is open at :{{ nifi_web_http_port }}
      wait_for:
        port: "{{ nifi_web_http_port }}"
        host: "{{ ansible_hostname }}"
      ignore_errors: yes
